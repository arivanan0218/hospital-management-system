# Production Docker Compose for AWS deployment
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hospital_management}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend-python/init.sql:/docker-entrypoint-initdb.d/
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Python MCP Server
  backend:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/hospital-backend:${IMAGE_TAG:-latest}
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-hospital_management}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PORT=8000
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - hospital-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/hospital-frontend:${IMAGE_TAG:-latest}
    environment:
      - VITE_OPENAI_API_KEY=${VITE_OPENAI_API_KEY}
      - VITE_CLAUDE_API_KEY=${VITE_CLAUDE_API_KEY}
      - VITE_GROQ_API_KEY=${VITE_GROQ_API_KEY}
      - VITE_GOOGLE_API_KEY=${VITE_GOOGLE_API_KEY}
      - VITE_BACKEND_URL=http://backend:8000
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - hospital-network

volumes:
  postgres_data:

networks:
  hospital-network:
    driver: bridge
