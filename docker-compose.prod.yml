version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: hospital_management
      POSTGRES_USER: hospital_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hospital_user -d hospital_management"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Python Service
  backend:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/hospital-backend:${IMAGE_TAG}
    environment:
      - DATABASE_URL=postgresql://hospital_user:${POSTGRES_PASSWORD}@postgres:5432/hospital_management
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Service
  frontend:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/hospital-frontend:${IMAGE_TAG}
    environment:
      - VITE_CLAUDE_API_KEY=${VITE_CLAUDE_API_KEY}
      - VITE_OPENAI_API_KEY=${VITE_OPENAI_API_KEY}
      - VITE_GROQ_API_KEY=${VITE_GROQ_API_KEY}
      - VITE_GOOGLE_API_KEY=${VITE_GOOGLE_API_KEY}
      - VITE_MCP_BRIDGE_URL=http://backend:8000
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  default:
    driver: bridge
