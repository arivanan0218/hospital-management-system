name: Deploy from Docker Branch

on:
  push:
    branches: [ docker ]
  workflow_dispatch:  # Allow manual triggering

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: hospital-backend
  ECR_REPOSITORY_FRONTEND: hospital-frontend
  ECR_REPOSITORY_MCP: hospital-mcp-manager
  ECS_SERVICE: hospital-management-service
  ECS_CLUSTER: hospital-cluster
  CONTAINER_NAME_BACKEND: hospital-backend-python
  CONTAINER_NAME_FRONTEND: hospital-frontend
  CONTAINER_NAME_MCP: hospital-mcp-manager

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        cd backend-python
        pip install -r requirements.txt

    - name: Install Node.js dependencies (MCP Manager)
      run: |
        cd mcp-process-manager
        npm install

    - name: Install Frontend dependencies
      run: |
        cd frontend
        npm install

    - name: Build Frontend
      run: |
        cd frontend
        npm run build

    - name: Run basic smoke tests
      run: |
        echo "✅ All dependencies installed successfully"
        echo "✅ Frontend built successfully"

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: docker-${{ github.sha }}
      run: |
        cd backend-python
        # Use BuildKit for faster builds
        export DOCKER_BUILDKIT=1
        docker build --cache-from $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        echo "Backend image pushed: $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG"

    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: docker-${{ github.sha }}
        VITE_MCP_BRIDGE_URL: http://hospital-alb-1667599615.us-east-1.elb.amazonaws.com:3001
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG \
          --build-arg VITE_MCP_BRIDGE_URL=$VITE_MCP_BRIDGE_URL .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        echo "Frontend image pushed: $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG"

    - name: Build, tag, and push MCP manager image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: docker-${{ github.sha }}
      run: |
        pwd
        ls -la
        echo "Building MCP manager Docker image..."
        echo "Checking if directories exist:"
        ls -la mcp-process-manager/ || echo "mcp-process-manager directory not found"
        ls -la backend-python/ || echo "backend-python directory not found"
        
        # Build with minimal Dockerfile that doesn't require backend-python
        DOCKER_BUILDKIT=1 docker build --file mcp-process-manager/Dockerfile.minimal --tag $ECR_REGISTRY/$ECR_REPOSITORY_MCP:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_MCP:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_MCP:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MCP:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MCP:latest
        echo "MCP manager image pushed: $ECR_REGISTRY/$ECR_REPOSITORY_MCP:$IMAGE_TAG"

    - name: Check if ECS task definition exists
      id: check-task-def
      run: |
        if aws ecs describe-task-definition --task-definition hospital-task-definition >/dev/null 2>&1; then
          echo "task-def-exists=true" >> $GITHUB_OUTPUT
        else
          echo "task-def-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Download existing task definition
      if: steps.check-task-def.outputs.task-def-exists == 'true'
      run: |
        aws ecs describe-task-definition --task-definition hospital-task-definition --query taskDefinition > task-definition.json

    - name: Create initial task definition if not exists
      if: steps.check-task-def.outputs.task-def-exists == 'false'
      run: |
        echo "⚠️ Task definition doesn't exist. Please run the AWS setup scripts first."
        echo "Run: cd aws-setup && ./setup-infrastructure.sh && ./create-task-definition.sh"
        exit 1

    - name: Fill in the new image ID in the Amazon ECS task definition (Backend)
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME_BACKEND }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:docker-${{ github.sha }}

    - name: Fill in the new image ID in the Amazon ECS task definition (Frontend)
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:docker-${{ github.sha }}

    - name: Fill in the new image ID in the Amazon ECS task definition (MCP)
      id: task-def-mcp
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_MCP }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_MCP }}:docker-${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-mcp.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Get Application URL
      run: |
        ALB_DNS=$(aws elbv2 describe-load-balancers --names hospital-alb --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "ALB not found")
        echo "🎉 Deployment completed successfully!"
        echo "📱 Application URL: http://$ALB_DNS"
        echo "🔍 Check ECS service: aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}"
