name: Hospital Management System CI/CD

on:
  push:
    branches: [ main, develop, docker ]
  pull_request:
    branches: [ main, docker ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: hospital-backend
  ECR_REPOSITORY_FRONTEND: hospital-frontend
  ECR_REPOSITORY_MCP: hospital-mcp-manager
  ECS_SERVICE: hospital-management-service
  ECS_CLUSTER: hospital-cluster
  CONTAINER_NAME_BACKEND: hospital-backend-python
  CONTAINER_NAME_FRONTEND: hospital-frontend
  CONTAINER_NAME_MCP: hospital-mcp-manager

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        cd backend-python
        pip install -r requirements.txt || echo "No requirements.txt found, using pyproject.toml"
        pip install -e .

    - name: Install Node.js dependencies
      run: |
        cd mcp-process-manager
        npm install

    - name: Install Frontend dependencies
      run: |
        cd frontend
        npm install

    - name: Run Python tests
      run: |
        cd backend-python
        python -m pytest || echo "No tests found"

    - name: Run Node.js tests
      run: |
        cd mcp-process-manager
        npm test || echo "No tests configured"

    - name: Build Frontend
      run: |
        cd frontend
        npm run build

  build-and-deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/docker') && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend-python
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Build, tag, and push MCP manager image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd mcp-process-manager
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_MCP:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_MCP:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_MCP:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MCP:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MCP:latest

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition hospital-task-definition --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition (Backend)
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME_BACKEND }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}

    - name: Fill in the new image ID in the Amazon ECS task definition (Frontend)
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}

    - name: Fill in the new image ID in the Amazon ECS task definition (MCP)
      id: task-def-mcp
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_MCP }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_MCP }}:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-mcp.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
