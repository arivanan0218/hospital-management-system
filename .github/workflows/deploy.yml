name: CI/CD Pipeline

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ dev, main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run lint
    
    - name: Install backend dependencies
      working-directory: ./backend-python
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test Docker builds
      run: |
        docker build -t test-frontend ./frontend
        docker build -t test-backend ./backend-python

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: hospital-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend-python
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Build, tag, and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: hospital-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Copy docker-compose file to EC2
        scp -i private_key.pem -o StrictHostKeyChecking=no docker-compose.prod.yml $USER@$HOST:~/
        
        # Deploy on EC2
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << 'EOF'
          # Install Docker and Docker Compose if not already installed
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io docker-compose-plugin
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
          fi
          
          # Configure AWS CLI
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ env.AWS_REGION }}
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
          # Set environment variables
          export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          export AWS_REGION=${{ env.AWS_REGION }}
          export IMAGE_TAG=${{ github.sha }}
          export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          export GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
          export VITE_OPENAI_API_KEY="${{ secrets.VITE_OPENAI_API_KEY }}"
          export VITE_CLAUDE_API_KEY="${{ secrets.VITE_CLAUDE_API_KEY }}"
          export VITE_GROQ_API_KEY="${{ secrets.VITE_GROQ_API_KEY }}"
          export VITE_GOOGLE_API_KEY="${{ secrets.VITE_GOOGLE_API_KEY }}"
          
          # Stop existing containers
          docker-compose -f docker-compose.prod.yml down || true
          
          # Pull latest images and start services
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -af
        EOF
        
        rm -f private_key.pem
